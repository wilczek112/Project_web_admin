package com.wilk.group.Project_web_admin.controller;

import com.wilk.group.Project_web_admin.classes.Ftp;
import com.wilk.group.Project_web_admin.classes.Privileges;
import com.wilk.group.Project_web_admin.repository.FtpRepository;
import com.wilk.group.Project_web_admin.repository.UserRepository;
import com.wilk.group.Project_web_admin.classes.User;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

@Controller
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    @Autowired
    private PrivilegesRepository privilegesRepository;
    @Autowired
    private FtpRepository ftpRepository;

    Privileges pAdmin = new Privileges();
    Privileges pUser = new Privileges();

    Ftp ftpUser = new Ftp();

    public void createBase(){
        pAdmin.addAdmin();
        privilegesRepository.save(pAdmin);
        pUser.addUser();
        privilegesRepository.save(pUser);
    }

    @RequestMapping(path = "/register")
    public String register(Model model) {
        model.addAttribute("user", new User(pUser));
        return "html/register";
    }



    @PostMapping(value = "/saveUser")
    public String saveUser(@Valid @ModelAttribute("user") User newUser, BindingResult errors, Model model) {
        if (errors.hasErrors()) {
            return "html/register";
        }else {
            ftpUser.setFtp("/G/"+newUser.getLogin());
            ftpRepository.save(ftpUser);
            newUser.setPrivileges(pUser);
            userRepository.save(newUser);
            return "/html/index";
        }
    }
    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
}
